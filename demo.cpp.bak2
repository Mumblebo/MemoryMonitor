#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <list>
#include <iostream>
#include <string.h>
#include "mem_tracer.h"

#ifdef MEM_TRACE
#define new     TRACE_NEW
#define delete  TRACE_DELETE
#endif

using namespace std;

class A {
public:
    A() {}
    ~A() {}

private:
    char ch[1024];
};

class TestObj {
public:	
    TestObj() { 
        cout << "TestObj::TestObj" << ++num << endl;
        //a = new A[1024];
    }

    virtual ~TestObj() {
        cout << "TestObj::~TestObj" << --num << endl;
        //delete[] a;
    };

private:
    A *a; 
    static int num;
};

int TestObj::num = 0;

int main() {
    list<TestObj*> lst;
    lst.clear();

    sleep(10);

    int d = 0;
    while(d < 100) {

    	TestObj* pob = new TestObj;	
        lst.push_back(pob);
        sleep(1);
        d++;
    }

    d = 0;
    list<TestObj*>::iterator iter;
    for(iter = lst.begin(); iter != lst.end(); iter++) {
        delete *iter;
        sleep(1);
        if(d++ == 10) {
            break;
        }
    }

	return 0;
}
